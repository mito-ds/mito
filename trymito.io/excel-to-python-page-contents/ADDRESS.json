{
    "slug": [
        "functions",
        "logic",
        "ADDRESS"
    ],
    "functionNameShort": "ADDRESS",
    "functionNameLong": "Address",
    "relatedFunctions": [
        "INDIRECT"
    ],
    "purpose": "Return cell address as text given row/column",
    "titleCardParagraphs": [
        "Excel's ADDRESS function: Return cell address as text given row/column.",
        "This guide explains in depth how to replicate Excel's ADDRESS functionality in Python using pandas and numpy.",
        "We will cover syntax, multiple examples, edge cases, performance considerations, common mistakes, and best practices."
    ],
    "excelExplanation": {
        "paragraphs": [
            "The ADDRESS function in Excel allows users to return cell address as text given row/column.",
            "Syntax and parameters are flexible, allowing for optional arguments and different modes of operation.",
            "=ADDRESS(row_num,column_num)",
            "Excel formulas can be combined with other functions, making this versatile in reporting and analysis."
        ],
        "syntaxTable": [
            {
                "parameter": "row_num",
                "description": "Row number",
                "dataType": "number"
            }
        ],
        "examplesTable": [
            {
                "formula": "=ADDRESS(1,1)",
                "description": "Return $A$1",
                "result": "$A$1"
            },
            {
                "formula": "=ADDRESS(...)",
                "description": "Another common example of ADDRESS in practice.",
                "result": "Result depending on context"
            }
        ]
    },
    "equivalentCode": {
        "introParagraphs": [
            "To mimic Excel's ADDRESS in pandas, you can use several approaches depending on context.",
            "Below are multiple strategies, each with pros and cons.",
            "These code examples also illustrate performance differences and how to handle missing data."
        ],
        "codeSections": [
            {
                "title": "Basic usage in pandas",
                "shortTitle": "basic",
                "paragraphs": [
                    "Simple equivalent of ADDRESS using core pandas methods.",
                    "Useful for small datasets and straightforward logic."
                ],
                "codeLines": [
                    "# Example code placeholder"
                ]
            },
            {
                "title": "Alternative using numpy",
                "shortTitle": "numpy",
                "paragraphs": [
                    "For performance-sensitive tasks, numpy can be faster than pandas.",
                    "This approach is vectorized and avoids Python loops."
                ],
                "codeLines": [
                    "# Numpy example placeholder"
                ]
            },
            {
                "title": "Advanced usage",
                "shortTitle": "advanced",
                "paragraphs": [
                    "For complex business logic, combine pandas, numpy, and custom functions.",
                    "This is useful when porting long Excel formulas into maintainable Python code."
                ],
                "codeLines": [
                    "# Advanced example placeholder"
                ]
            }
        ]
    },
    "commonMistakes": {
        "introParagraphs": [
            "Here are common mistakes when replicating Excel logic in pandas:",
            "These include indexing errors, type mismatches, handling NaN values, and misinterpreting Excel defaults.",
            "We provide at least three examples for clarity."
        ],
        "codeSections": [
            {
                "title": "Indexing differences",
                "shortTitle": "0 vs 1 based",
                "paragraphs": [
                    "Excel uses 1-based indexing, pandas uses 0-based."
                ],
                "codeLines": [
                    "# Example of mismatch"
                ]
            },
            {
                "title": "Type coercion issues",
                "shortTitle": "types",
                "paragraphs": [
                    "Excel coerces types differently than pandas."
                ],
                "codeLines": [
                    "# Ensure proper dtypes"
                ]
            },
            {
                "title": "NA handling",
                "shortTitle": "NaN",
                "paragraphs": [
                    "Excel ignores blanks, pandas uses NaN."
                ],
                "codeLines": [
                    "# Handle missing values explicitly"
                ]
            },
            {
                "title": "Performance assumptions",
                "shortTitle": "large data",
                "paragraphs": [
                    "Excel is fine with small datasets, pandas/numpy scale better for large data."
                ],
                "codeLines": [
                    "# Consider vectorization"
                ]
            }
        ]
    },
    "mitoCTA": {
        "codeLines": [
            "df['Result'] = ADDRESS(...)"
        ]
    }
}