{
  "slug": [
    "functions",
    "lookup",
    "ROWS"
  ],
  "functionNameShort": "ROWS",
  "functionNameLong": "Rows",
  "relatedFunctions": [
    "ROW"
  ],
  "purpose": "Return number of rows in range",
  "titleCardParagraphs": [
    "Excel's ROWS function: Return number of rows in range.",
    "This guide explains in depth how to replicate Excel's ROWS functionality in Python using pandas and numpy.",
    "We will cover syntax, multiple examples, edge cases, performance considerations, common mistakes, and best practices."
  ],
  "excelExplanation": {
    "paragraphs": [
      "The ROWS function in Excel allows users to return number of rows in range.",
      "Syntax and parameters are flexible, allowing for optional arguments and different modes of operation.",
      "=ROWS(array)",
      "Excel formulas can be combined with other functions, making this versatile in reporting and analysis."
    ],
    "syntaxTable": [
      {
        "parameter": "array",
        "description": "Range",
        "dataType": "range"
      }
    ],
    "examplesTable": [
      {
        "formula": "=ROWS(A1:C10)",
        "description": "Count rows",
        "result": "10"
      },
      {
        "formula": "=ROWS(...)",
        "description": "Another common example of ROWS in practice.",
        "result": "Result depending on context"
      }
    ]
  },
  "equivalentCode": {
    "introParagraphs": [
      "To mimic Excel's ROWS in pandas, you can use several approaches depending on context.",
      "Below are multiple strategies, each with pros and cons.",
      "These code examples also illustrate performance differences and how to handle missing data."
    ],
    "codeSections": [
      {
        "title": "Basic usage in pandas",
        "shortTitle": "basic",
        "paragraphs": [
          "Simple equivalent of ROWS using core pandas methods.",
          "Useful for small datasets and straightforward logic."
        ],
        "codeLines": [
          "import pandas as pd",
          "df = pd.DataFrame({'A':[10,20], 'B':[30,40]})",
          "print(len(df))"
        ]
      },
      {
        "title": "Alternative using numpy",
        "shortTitle": "numpy",
        "paragraphs": [
          "For performance-sensitive tasks, numpy can be faster than pandas.",
          "This approach is vectorized and avoids Python loops."
        ],
        "codeLines": [
          "import pandas as pd",
          "df = pd.DataFrame({'A':[10,20],'B':[30,40]})",
          "print(df.to_numpy().shape[0])"
        ]
      },
      {
        "title": "Advanced usage",
        "shortTitle": "advanced",
        "paragraphs": [
          "For complex business logic, combine pandas, numpy, and custom functions.",
          "This is useful when porting long Excel formulas into maintainable Python code."
        ],
        "codeLines": [
          "import pandas as pd",
          "df = pd.DataFrame({'A':[10,20],'B':[30,40]})",
          "visible = pd.Series([True, False])  # simulate hidden rows logic",
          "print(df.loc[visible].shape[0])"
        ]
      }
    ]
  },
  "commonMistakes": {
    "introParagraphs": [
      "Here are common mistakes when replicating Excel logic in pandas:",
      "These include indexing errors, type mismatches, handling NaN values, and misinterpreting Excel defaults.",
      "We provide at least three examples for clarity."
    ],
    "codeSections": [
      {
        "title": "Indexing differences",
        "shortTitle": "0 vs 1 based",
        "paragraphs": [
          "Excel uses 1-based indexing, pandas uses 0-based."
        ],
        "codeLines": [
          "# Excel is 1-based, pandas iloc is 0-based:",
          "import pandas as pd",
          "df = pd.DataFrame({'A':[10,20], 'B':[30,40]})",
          "excel_row, excel_col = 2, 2  # B2",
          "value = df.iloc[excel_row-1, excel_col-1]",
          "print(value)"
        ]
      },
      {
        "title": "Type coercion issues",
        "shortTitle": "types",
        "paragraphs": [
          "Excel coerces types differently than pandas."
        ],
        "codeLines": [
          "import pandas as pd",
          "df = pd.DataFrame({'num':['10','20','x']})",
          "df['num_num'] = pd.to_numeric(df['num'], errors='coerce')",
          "print(df)"
        ]
      },
      {
        "title": "NA handling",
        "shortTitle": "NaN",
        "paragraphs": [
          "Excel ignores blanks, pandas uses NaN."
        ],
        "codeLines": [
          "import pandas as pd",
          "df = pd.DataFrame({'A':[1,None,3]})",
          "print(df['A'].fillna(0))  # Excel often treats blanks as 0 in some functions"
        ]
      },
      {
        "title": "Performance assumptions",
        "shortTitle": "large data",
        "paragraphs": [
          "Excel is fine with small datasets, pandas/numpy scale better for large data."
        ],
        "codeLines": [
          "import pandas as pd",
          "df = pd.DataFrame({'A': range(1_000)})",
          "# Avoid row-wise loops:",
          "total_loop = 0",
          "for _, r in df.iterrows():",
          "    total_loop += r['A']",
          "# Prefer vectorization:",
          "total_vec = df['A'].sum()",
          "print(total_vec)"
        ]
      }
    ]
  }
}