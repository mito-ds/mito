# Copyright (c) Saga Inc.
# Distributed under the terms of the GNU Affero General Public License v3.0 License.

from typing import Dict, Optional

from metaprogramming.utils.action_utils import write_to_actions_file
from metaprogramming.utils.code_utils import (CLOSE_BRACKET, OPEN_BRACKET,
                                              add_enum_value, name_to_enum_key)
from metaprogramming.utils.path_utils import (create_folder, get_src_folder,
                                              write_python_code_file)
from metaprogramming.utils.taskpane_utils import get_new_taskpane_code

TASKPANETYPE_MARKER = "// AUTOGENERATED LINE: TASKPANETYPE (DO NOT DELETE)"
TASKPANEINFO_MARKER = "// AUTOGENERATED LINE: TASKPANEINFO (DO NOT DELETE)"
EDITINGTASKPANE_MARKER = "// AUTOGENERATED LINE: EDITINGTASKPANE (DO NOT DELETE)"
ALLOWUNDOREDOEDITINGTASKPANE_MARKER = "// AUTOGENERATED LINE: ALLOWUNDOREDOEDITINGTASKPANE (DO NOT DELETE)"
MITOIMPORT_MARKER = "// AUTOGENERATED LINE: MITOIMPORT (DO NOT DELETE)"
GETCURROPENTASKPANE_MARKER = "// AUTOGENERATED LINE: GETCURROPENTASKPANE (DO NOT DELETE)"


def get_curr_open_taskpane_code(original_step_name: str) -> str:
    taskpane_name = original_step_name.replace(' ', '') + 'Taskpane'
    taskpane_type = original_step_name.upper().replace(' ', '_')
    
    return f"""case TaskpaneType.{taskpane_type}: return (
                <{taskpane_name}
                    userProfile={OPEN_BRACKET}userProfile{CLOSE_BRACKET}
                    analysisData={OPEN_BRACKET}analysisData{CLOSE_BRACKET}
                    sheetDataArray={OPEN_BRACKET}sheetDataArray{CLOSE_BRACKET}
                    setUIState={OPEN_BRACKET}setUIState{CLOSE_BRACKET}
                    mitoAPI={OPEN_BRACKET}mitoAPI{CLOSE_BRACKET}
                    selectedSheetIndex={OPEN_BRACKET}uiState.selectedSheetIndex{CLOSE_BRACKET}
                />
            )
            {GETCURROPENTASKPANE_MARKER}"""


def write_to_mito(original_step_name: str) -> None:
    step_name_capital = original_step_name.replace(' ', '')
    path_to_mito = get_src_folder() / 'components' / 'Mito.tsx'

    with open(path_to_mito, 'r') as f:
        code = f.read()
        code = code.replace(MITOIMPORT_MARKER, f'import {step_name_capital}Taskpane from \'./taskpanes/{step_name_capital}/{step_name_capital}Taskpane\';\n{MITOIMPORT_MARKER}')
        code = code.replace(GETCURROPENTASKPANE_MARKER, f'{(get_curr_open_taskpane_code(original_step_name))}')

    with open(path_to_mito, 'w') as f:
        f.write(code)


def write_taskpane_types_file(original_taskpane_name: str, is_editing_taskpane: bool, is_remain_open_undo_redo_taskpane: bool) -> None:
    
    path_to_taskpanes = get_src_folder() / 'components' / 'taskpanes' / 'taskpanes.tsx'
    enum_key = name_to_enum_key(original_taskpane_name)
    enum_value = original_taskpane_name

    # First, add to the enum
    add_enum_value(path_to_taskpanes, TASKPANETYPE_MARKER, enum_key, enum_value)

    # Then, we go and add the rest of the types
    with open(path_to_taskpanes, 'r') as f:
        code = f.read()
        code = code.replace(TASKPANEINFO_MARKER, f'| {OPEN_BRACKET}type: TaskpaneType.{enum_key}{CLOSE_BRACKET}\n     {TASKPANEINFO_MARKER}')
        if is_editing_taskpane:
            code = code.replace(EDITINGTASKPANE_MARKER, f'TaskpaneType.{enum_key},\n    {EDITINGTASKPANE_MARKER}')
        if is_remain_open_undo_redo_taskpane:
            code = code.replace(ALLOWUNDOREDOEDITINGTASKPANE_MARKER, f'TaskpaneType.{enum_key},\n    {ALLOWUNDOREDOEDITINGTASKPANE_MARKER}')

    with open(path_to_taskpanes, 'w') as f:
        f.write(code)


def create_new_taskpane(original_taskpane_name: str, params: Dict[str, str], is_editing_taskpane: bool, is_live_updating_taskpane: bool, is_remain_open_undo_redo_taskpane: bool, create_action: Optional[bool]=None) -> None:
    
    taskpane_name_capital = original_taskpane_name.replace(' ', '')
    path_to_folder = get_src_folder() / 'components' / 'taskpanes' / taskpane_name_capital
    path_to_taskpane = path_to_folder / f'{taskpane_name_capital}Taskpane.tsx'

    # First, create the folder
    create_folder(path_to_folder)

    # Then, write the taskpane
    taskpane_code = get_new_taskpane_code(original_taskpane_name, params, is_live_updating_taskpane)
    write_python_code_file(path_to_taskpane, taskpane_code)

    # Then, update the taskpane types file
    write_taskpane_types_file(original_taskpane_name, is_editing_taskpane, is_remain_open_undo_redo_taskpane)

    # Then, update Mito.tsx
    write_to_mito(original_taskpane_name)

    if create_action:
        write_to_actions_file(original_taskpane_name, True)
