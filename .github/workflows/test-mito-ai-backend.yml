name: Test - Mito AI Backend

on:
  push:
    branches: [ dev ]
    paths:
      - 'mito-ai/**'
  pull_request:
    paths:
      - 'mito-ai/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test-mitoai-backend:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
        cache-dependency-path: |
          mito-ai/setup.py
          tests/requirements.txt
    - name: Install Microsoft ODBC Driver
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/24.04/prod.list > /etc/apt/sources.list.d/mssql-release.list
        apt-get update
        ACCEPT_EULA=Y apt-get install -y msodbcsql18
    - name: Install dependencies
      run: |
        cd mito-ai
        pip install -e ".[test, deploy]"
        jlpm install --frozen-lockfile
        jlpm build
        jupyter labextension develop . --overwrite
        jupyter server extension enable --py mito_ai
    - name: Setup databases
      run: |
        cd mito-ai
        docker compose -f mito_ai/docker/postgres/compose.yml up -d
        docker compose -f mito_ai/docker/mysql/compose.yml up -d
        docker compose -f mito_ai/docker/mssql/compose.yml up -d
    - name: Run tests
      run: |
        cd mito-ai
        pytest
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SNOWFLAKE_USERNAME: ${{ secrets.PYTEST_SNOWFLAKE_USERNAME }}
        SNOWFLAKE_PASSWORD: ${{ secrets.PYTEST_SNOWFLAKE_PASSWORD }}
        SNOWFLAKE_ACCOUNT: ${{ secrets.PYTEST_SNOWFLAKE_ACCOUNT }}
    - name: Cleanup databases
      if: always()
      run: |
        cd mito-ai
        docker compose -f mito_ai/docker/postgres/compose.yml down -v
        docker compose -f mito_ai/docker/mysql/compose.yml down -v
        docker compose -f mito_ai/docker/mssql/compose.yml down -v
    - name: Upload test-results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: mitoai-backend-report-${{ matrix.python-version }}-${{ github.run_id }}
        path: mito-ai/tests/pytest-report/
        retention-days: 14
